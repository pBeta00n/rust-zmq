#ABE0AB//! Module: zmq

#[link(name = "zmq",
       vers = "0.6.0",
       uuid = "54cc1bc9-02b8-447c-a227-75ebc923bc29")];
#[crate_type = "lib"];

extern mod std;

use core::libc::{c_int, c_long, c_void, size_t, c_char};

/// The ZMQ container that manages all the sockets
type Context_ = *c_void;

/// A ZMQ socket
type Socket_ = *c_void;

/// A message
struct Msg_ {
    content: [u8, .. 32],
}

extern mod zmq {
    fn zmq_version(major: *c_int, minor: *c_int, patch: *c_int);

    fn zmq_ctx_new() -> *c_void;
    fn zmq_ctx_destroy(context: *c_void) -> c_int;
    fn zmq_ctx_set(context: *c_void, option: c_int, optval: c_int) -> c_int;
    fn zmq_ctx_get(context: *c_void, option: c_int) -> c_int;

    fn zmq_msg_init(msg: *Msg_) -> c_int;
    fn zmq_msg_init_size(msg: &Msg_, size: size_t) -> c_int;
    /*
    fn zmq_msg_init_data(
        msg: &Msg_,
        data: *c_void,
        size: size_t,
        ffn: zmq_free_fn,
        hint: *c_void
    ) -> c_int;
    */
    fn zmq_msg_data(msg: *Msg_) -> *u8;
    fn zmq_msg_size(msg: *Msg_) -> size_t;
    fn zmq_msg_close(msg: *Msg_) -> c_int;
    fn zmq_msg_send(msg: &Msg_, socket: &Socket_, flags: c_int) -> c_int;
    fn zmq_msg_recv(msg: &Msg_, socket: &Socket_, flags: c_int) -> c_int;


    fn zmq_errno() -> c_int;
    fn zmq_strerror(errnum: c_int) -> *c_char;

    fn zmq_socket(ctx: Context_, typ: c_int) -> Socket_;
    fn zmq_close(socket: Socket_) -> c_int;

    fn zmq_getsockopt(
            socket: Socket_,
            opt: c_int,
            optval: *c_void,
            size: *size_t) -> c_int;
    fn zmq_setsockopt(
            socket: Socket_,
            opt: c_int,
            optval: *c_void,
            size: size_t) -> c_int;

    fn zmq_bind(socket: Socket_, endpoint: *c_char) -> c_int;
    fn zmq_connect(socket: Socket_, endpoint: *c_char) -> c_int;
/*
    fn zmq_sendmsg(socket: Socket_, msg: &Msg_, flags: c_int) -> c_int;
    fn zmq_recvmsg(socket: Socket_, msg: &mut Msg_, flags: c_int) -> c_int;
    */

    fn zmq_poll(items: *PollItem, nitems: c_int, timeout: c_long) -> c_int;
}

pub static ZMQ_IO_THREADS: c_int = 1;
pub static ZMQ_MAX_SOCKETS: c_int = 2;

/// Socket types
pub enum SocketType {
    PAIR = 0,
    PUB = 1,
    SUB = 2,
    REQ = 3,
    REP = 4,
    DEALER = 5,
    ROUTER = 6,
    PULL = 7,
    PUSH = 8,
    XPUB = 9,
    XSUB = 10,
}

pub static DONTWAIT : int = 1;
pub static SNDMORE : int = 2;

pub mod constants {
    use core::libc::c_int;

    pub static ZMQ_AFFINITY: c_int = 4;
    pub static ZMQ_IDENTITY: c_int = 5;
    pub static ZMQ_SUBSCRIBE: c_int = 6;
    pub static ZMQ_UNSUBSCRIBE: c_int = 7;
    pub static ZMQ_RATE: c_int = 8;
    pub static ZMQ_RECOVERY_IVL: c_int = 9;
    pub static ZMQ_MCAST_LOOP: c_int = 10;
    pub static ZMQ_SNDBUF: c_int = 11;
    pub static ZMQ_RCVBUF: c_int = 12;
    pub static ZMQ_RCVMORE: c_int = 13;
    pub static ZMQ_FD: c_int = 14;
    pub static ZMQ_EVENTS: c_int = 15;
    pub static ZMQ_TYPE: c_int = 16;
    pub static ZMQ_LINGER: c_int = 17;
    pub static ZMQ_RECONNECT_IVL: c_int = 18;
    pub static ZMQ_BACKLOG: c_int = 19;
    pub static ZMQ_RECOVERY_IVL_MSEC: c_int = 20;
    pub static ZMQ_RECONNECT_IVL_MAX: c_int = 21;
    pub static ZMQ_MAXMSGSIZE: c_int = 22;
    pub static ZMQ_SNDHWM: c_int = 23;
    pub static ZMQ_RCVHWM: c_int = 24;
    pub static ZMQ_MULTICAST_HOPS: c_int = 25;
    pub static ZMQ_RCVTIMEO: c_int = 27;
    pub static ZMQ_SNDTIMEO: c_int = 28;
    pub static ZMQ_IPV4ONLY: c_int = 31;
    pub static ZMQ_LAST_ENDPOINT: c_int = 32;
    pub static ZMQ_ROUTER_MANDATORY: c_int = 33;
    pub static ZMQ_TCP_KEEPALIVE: c_int = 34;
    pub static ZMQ_TCP_KEEPALIVE_CNT: c_int = 35;
    pub static ZMQ_TCP_KEEPALIVE_IDLE: c_int = 36;
    pub static ZMQ_TCP_KEEPALIVE_INTVL: c_int = 37;
    pub static ZMQ_TCP_ACCEPT_FILTER: c_int = 38;
    pub static ZMQ_DELAY_ATTACH_ON_CONNECT: c_int = 39;
    pub static ZMQ_XPUB_VERBOSE: c_int = 40;

    pub static ZMQ_MORE: c_int = 1;
    pub static ZMQ_DONTWAIT: c_int = 1;
    pub static ZMQ_SNDMORE: c_int = 2;

    pub static ZMQ_HAUSNUMERO : int = 156384712;
}

#[cfg(target_os = "linux")]
#[cfg(target_os = "macos")]
#[deriving(Eq)]
pub enum Error {
    ENOTSUP = 45,
    EPROTONOSUPPORT = 43,
    ENOBUFS = 55,
    ENETDOWN = 50,
    EADDRINUSE = 48,
    EADDRNOTAVAIL = 49,
    ECONNREFUSED = 61,
    EINPROGRESS = 36,
    ENOTSOCK = 38,

    EFSM = constants::ZMQ_HAUSNUMERO + 51,
    ENOCOMPATPROTO = constants::ZMQ_HAUSNUMERO + 52,
    ETERM = constants::ZMQ_HAUSNUMERO + 53,
    EMTHREAD = constants::ZMQ_HAUSNUMERO + 54,
}

#[cfg(target_os = "windows")]
#[deriving(Eq)]
pub enum Error {
    ENOTSUP = constants::ZMQ_HAUSNUMERO + 1,
    EPROTONOSUPPORT = constants::ZMQ_HAUSNUMERO + 2,
    ENOBUFS = constants::ZMQ_HAUSNUMERO + 3,
    ENETDOWN = constants::ZMQ_HAUSNUMERO + 4,
    EADDRINUSE = constants::ZMQ_HAUSNUMERO + 5,
    EADDRNOTAVAIL = constants::ZMQ_HAUSNUMERO + 6,
    ECONNREFUSED = constants::ZMQ_HAUSNUMERO + 7,
    EINPROGRESS = constants::ZMQ_HAUSNUMERO + 8,
    ENOTSOCK = constants::ZMQ_HAUSNUMERO + 9,

    EFSM = constants::ZMQ_HAUSNUMERO + 51,
    ENOCOMPATPROTO = constants::ZMQ_HAUSNUMERO + 52,
    ETERM = constants::ZMQ_HAUSNUMERO + 53,
    EMTHREAD = constants::ZMQ_HAUSNUMERO + 54,
}

// Return the current zeromq version.
pub fn version() -> (int, int, int) {
    let major = 0i32;
    let minor = 0i32;
    let patch = 0i32;
    unsafe {
        zmq::zmq_version(
            ptr::addr_of(&major),
            ptr::addr_of(&minor),
            ptr::addr_of(&patch)
        )
    };
    (major as int, minor as int, patch as int)
}

// Create a zeromq context.
pub fn init(io_threads: int) -> Result<Context, Error> {
    let ctx = unsafe { zmq::zmq_init(io_threads as i32) };

    if ctx.is_null() {
        return Err(errno_to_error());
    }

    Ok(Context { ctx: ctx })
}

pub struct Context {
    priv ctx: Context_,
}

pub impl Context {
    fn socket(&self, socket_type: SocketType) -> Result<Socket, Error> {
        let sock = unsafe { zmq::zmq_socket(self.ctx, socket_type as c_int) };

        if sock.is_null() {
            return Err(errno_to_error());
        }

        Ok(Socket { sock: sock as Socket_ })
    }

    fn term(&self) -> Result<(), Error> {
        let rc = unsafe { zmq::zmq_term(self.ctx) };
        if rc == -1i32 {
            Err(errno_to_error())
        } else {
            Ok(())
        }
    }
}

pub struct Socket {
    priv sock: Socket_,
}

impl Drop for Socket {
    fn finalize(&self) {
        match self.close() {
            Ok(()) => { }
            Err(e) => {
                // Ignore the error if the socket has already been closed.
                if e != ENOTSOCK { fail!(e.to_str()); }
            }
        }
    }
}

pub impl Socket {
    fn get_socket_type(&self) -> Result<SocketType, Error> {
        do getsockopt_int(self.sock, constants::ZMQ_TYPE).map |ty| {
            match *ty {
                0 => PAIR,
                1 => PUB,
                2 => SUB,
                3 => REQ,
                4 => REP,
                5 => DEALER,
                6 => ROUTER,
                7 => PULL,
                8 => PUSH,
                9 => XPUB,
                10 => XSUB,
                _ => fail!(~"socket type is out of range!"),
            }
        }
    }

    fn get_rcvmore(&self) -> Result<bool, Error> {
        do getsockopt_i64(self.sock, constants::ZMQ_RCVMORE).chain |o| {
            Ok(o == 1i64)
        }
    }

    fn get_sndhwm(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_SNDHWM)
    }

    fn get_rcvhwm(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_RCVHWM)
    }

    fn get_affinity(&self) -> Result<u64, Error> {
        getsockopt_u64(self.sock, constants::ZMQ_AFFINITY)
    }

    fn get_identity(&self) -> Result<~[u8], Error> {
        getsockopt_bytes(self.sock, constants::ZMQ_IDENTITY)
    }

    fn get_rate(&self) -> Result<i64, Error> {
        getsockopt_i64(self.sock, constants::ZMQ_RATE)
    }

    fn get_recovery_ivl(&self) -> Result<i64, Error> {
        getsockopt_i64(self.sock, constants::ZMQ_RECOVERY_IVL)
    }

    fn get_mcast_loop(&self) -> Result<bool, Error> {
        do getsockopt_i64(self.sock, constants::ZMQ_MCAST_LOOP).chain |o| {
            Ok(o == 1i64)
        }
    }

    fn get_sndbuf(&self) -> Result<u64, Error> {
        getsockopt_u64(self.sock, constants::ZMQ_SNDBUF)
    }

    fn get_rcvbuf(&self) -> Result<u64, Error> {
        getsockopt_u64(self.sock, constants::ZMQ_RCVBUF)
    }

    fn get_linger(&self) -> Result<i64, Error> {
        getsockopt_i64(self.sock, constants::ZMQ_LINGER)
    }

    fn get_reconnect_ivl(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_RECONNECT_IVL)
    }

    fn get_reconnect_ivl_max(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_RECONNECT_IVL_MAX)
    }

    fn get_backlog(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_BACKLOG)
    }

    fn get_maxmsgsize(&self) -> Result<i64, Error> {
        getsockopt_i64(self.sock, constants::ZMQ_MAXMSGSIZE)
    }

    fn get_multicast_hops(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_MULTICAST_HOPS)
    }

    fn get_rcvtimeo(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_RCVTIMEO)
    }

    fn get_sndtimeo(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_SNDTIMEO)
    }

    fn get_ipv4only(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_IPV4ONLY)
    }

    fn get_delay_attach_on_connect(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_DELAY_ATTACH_ON_CONNECT)
    }

    fn get_fd(&self) -> Result<i64, Error> {
        getsockopt_i64(self.sock, constants::ZMQ_FD)
    }

    fn get_events(&self) -> Result<u32, Error> {
        getsockopt_u32(self.sock, constants::ZMQ_EVENTS)
    }

    fn get_last_endpoint(&self) -> Result<~[u8], Error> {
        getsockopt_bytes(self.sock, constants::ZMQ_LAST_ENDPOINT)
    }

    fn get_tcp_keepalive(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_TCP_KEEPALIVE)
    }

    fn get_tcp_keepalive_idle(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_TCP_KEEPALIVE_IDLE)
    }

    fn get_tcp_keepalive_cnt(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_TCP_KEEPALIVE_CNT)
    }

    fn get_tcp_keepalive_intvl(&self) -> Result<int, Error> {
        getsockopt_int(self.sock, constants::ZMQ_TCP_KEEPALIVE_INTVL)
    }

    fn set_sndhwm(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_SNDHWM, value)
    }

    fn set_rcvhwm(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_RCVHWM, value)
    }

    fn set_affinity(&self, value: u64) -> Result<(), Error> {
        setsockopt_u64(self.sock, constants::ZMQ_AFFINITY, value)
    }

    fn set_subscribe(&self, value: &[u8]) -> Result<(), Error> {
        setsockopt_bytes(self.sock, constants::ZMQ_SUBSCRIBE, value)
    }

    fn set_unsubscribe(&self, value: &[u8]) -> Result<(), Error> {
        setsockopt_bytes(self.sock, constants::ZMQ_UNSUBSCRIBE, value)
    }

    fn set_identity(&self, value: &[u8]) -> Result<(), Error> {
        setsockopt_bytes(self.sock, constants::ZMQ_IDENTITY, value)
    }

    fn set_rate(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_RATE, value)
    }

    fn set_recovery_ivl(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_RECOVERY_IVL, value)
    }

    fn set_mcast_loop(&self, value: bool) -> Result<(), Error> {
        let value = if value { 1i64 } else { 0i64 };
        setsockopt_i64(self.sock, constants::ZMQ_MCAST_LOOP, value)
    }

    fn set_sndbuf(&self, value: u64) -> Result<(), Error> {
        setsockopt_u64(self.sock, constants::ZMQ_SNDBUF, value)
    }

    fn set_rcvbuf(&self, value: u64) -> Result<(), Error> {
        setsockopt_u64(self.sock, constants::ZMQ_RCVBUF, value)
    }

    fn set_linger(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_LINGER, value)
    }

    fn set_reconnect_ivl(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_RECONNECT_IVL, value)
    }

    fn set_reconnect_ivl_max(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_RECONNECT_IVL_MAX, value)
    }

    fn set_backlog(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_BACKLOG, value)
    }

    fn set_maxmsgsize(&self, value: i64) -> Result<(), Error> {
        setsockopt_i64(self.sock, constants::ZMQ_MAXMSGSIZE, value)
    }

    fn set_multicast_hops(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_MULTICAST_HOPS, value)
    }

    fn set_rcvtimeo(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_RCVTIMEO, value)
    }

    fn set_sndtimeo(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_SNDTIMEO, value)
    }

    fn set_ipv4only(&self, value: bool) -> Result<(), Error> {
        let value = if value { 1 } else { 0 };
        setsockopt_int(self.sock, constants::ZMQ_IPV4ONLY, value)
    }

    fn set_delay_attach_on_connect(&self, value: bool) -> Result<(), Error> {
        let value = if value { 1 } else { 0 };
        setsockopt_int(self.sock, constants::ZMQ_DELAY_ATTACH_ON_CONNECT, value)
    }

    fn set_router_mandatory(&self, value: bool) -> Result<(), Error> {
        let value = if value { 1 } else { 0 };
        setsockopt_int(self.sock, constants::ZMQ_ROUTER_MANDATORY, value)
    }

    fn set_xpub_verbose(&self, value: bool) -> Result<(), Error> {
        let value = if value { 1 } else { 0 };
        setsockopt_int(self.sock, constants::ZMQ_XPUB_VERBOSE, value)
    }

    fn set_tcp_keepalive(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_TCP_KEEPALIVE, value)
    }

    fn set_tcp_keepalive_cnt(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_TCP_KEEPALIVE_CNT, value)
    }

    fn set_tcp_keepalive_intvl(&self, value: int) -> Result<(), Error> {
        setsockopt_int(self.sock, constants::ZMQ_TCP_KEEPALIVE_INTVL, value)
    }

    fn set_tcp_accept_filter(&self, value: &[u8]) -> Result<(), Error> {
        setsockopt_bytes(self.sock, constants::ZMQ_TCP_ACCEPT_FILTER, value)
    }

    fn clear_tcp_accept_filters(&self) -> Result<(), Error> {
        unsafe { setsockopt_buf(self.sock, constants::ZMQ_TCP_ACCEPT_FILTER, ptr::null(), 0) }
    }

    /// Accept connections on a socket.
    fn bind(&self, endpoint: &str) -> Result<(), Error> {
        let rc = do str::as_c_str(endpoint) |cstr| {
            unsafe { zmq::zmq_bind(self.sock, cstr) }
        };

        if rc == -1i32 { Err(errno_to_error()) } else { Ok(()) }
    }

    /// Connect a socket.
    fn connect(&self, endpoint: &str) -> Result<(), Error> {
        let rc = do str::as_c_str(endpoint) |cstr| {
            unsafe { zmq::zmq_connect(self.sock, cstr) }
        };

        if rc == -1i32 { Err(errno_to_error()) } else { Ok(()) }
    }

    fn send(&self, data: &[u8], flags: int) -> Result<(), Error> {
        do vec::as_const_buf(data) |base_ptr, len| {
            io::println(fmt!("sending: len: %?", len));
            let mut msg = Msg_ { content: [0, .. 32] };

            unsafe {
                // Copy the data into the message.
                zmq::zmq_msg_init_size(&msg, len as size_t);

                io::println(fmt!("send: %?", data));

                ptr::copy_memory(
                    ::cast::transmute(zmq::zmq_msg_data(&msg)),
                    base_ptr,
                    len);

                io::println(fmt!("send: %?", *zmq::zmq_msg_data(&msg)));

                let rc = zmq::zmq_sendmsg(self.sock, &msg, flags as c_int);

                zmq::zmq_msg_close(&msg);

                if rc == -1i32 { Err(errno_to_error()) } else { Ok(()) }
            }
        }
    }

    fn send_str(&self, data: &str, flags: int) -> Result<(), Error> {
        str::byte_slice(data, |bytes| self.send(bytes, flags))
    }

    unsafe fn recv(&self, flags: int) -> Result<Message, Error> {
        let mut msg = Msg_ { content: [0, .. 32] };

        zmq::zmq_msg_init(&msg);
        let rc = zmq::zmq_recvmsg(self.sock, &mut msg, flags as c_int);

        io::println(fmt!("recv: %?", zmq::zmq_msg_size(&msg)));

        if rc == -1i32 {
            Err(errno_to_error())
        } else {
            Ok(Message { msg: msg })
        }
    }

    fn recv_bytes(&self, flags: int) -> Result<~[u8], Error> {
        match unsafe { self.recv(flags) } {
            Ok(msg) => Ok(msg.to_bytes()),
            Err(e) => Err(e),
        }
    }

    fn recv_str(&self, flags: int) -> Result<~str, Error> {
        match unsafe { self.recv(flags) } {
            Ok(msg) => Ok(msg.to_str()),
            Err(e) => Err(e),
        }
    }

    fn close(&self) -> Result<(), Error> {
        let rc = unsafe { zmq::zmq_close(self.sock) };
        if rc == -1i32 {
            Err(errno_to_error())
        } else {
            Ok(())
        }
    }
}

struct Message {
    priv msg: Msg_,
}

impl Drop for Message {
    fn finalize(&self) {
        unsafe {
            zmq::zmq_msg_close(&self.msg);
        }
    }
}

pub impl Message {
    unsafe fn with_ptr<T>(&self, f: &fn(*u8, uint) -> T) -> T {
        let data = zmq::zmq_msg_data(&self.msg);
        let len = zmq::zmq_msg_size(&self.msg) as uint;
        io::println(fmt!("with_ptr: len: %?", len));

        f(data, len)
    }

    fn with_bytes<T>(&self, f: &fn(&[u8]) -> T) -> T {
        unsafe {
            do self.with_ptr |data, len| {
                vec::raw::buf_as_slice(data, len, f)
            }
        }
    }

    fn with_str<T>(&self, f: &fn(&str) -> T) -> T {
        unsafe {
            do self.with_ptr |data, len| {
                str::raw::buf_as_slice(data, len, f)
            }
        }
    }

    fn to_bytes(&self) -> ~[u8] {
        self.with_bytes(|v| vec::from_slice(v))
    }

    fn to_str(&self) -> ~str {
        self.with_str(|s| str::from_slice(s))
    }
}

pub static POLLIN : i16 = 1i16;
pub static POLLOUT : i16 = 2i16;
pub static POLLERR : i16 = 4i16;

pub struct PollItem {
    socket: Socket_,
    fd: c_int,
    events: i16,
    revents: i16,
}

pub fn poll(items: &[PollItem], timeout: i64) -> Result<(), Error> {
    do vec::as_imm_buf(items) |p, len| {
        let rc = unsafe {
            zmq::zmq_poll(
                p,
                len as c_int,
                timeout as c_long)
        };
        if rc == -1i32 { Err(errno_to_error()) } else { Ok(()) }
    }
}

impl to_str::ToStr for Error {
    /// Return the error string for an error.
    fn to_str(&self) -> ~str {
        unsafe {
            str::raw::from_c_str(zmq::zmq_strerror(*self as c_int))
        }
    }
}

/// Convert the errno into an error type.
fn errno_to_error() -> Error {
    unsafe {
        match zmq::zmq_errno() {
            e if e == ENOTSUP as c_int         => ENOTSUP,
            e if e == EPROTONOSUPPORT as c_int => EPROTONOSUPPORT,
            e if e == ENOBUFS as c_int         => ENOBUFS,
            e if e == ENETDOWN as c_int        => ENETDOWN,
            e if e == EADDRINUSE as c_int      => EADDRINUSE,
            e if e == EADDRNOTAVAIL as c_int   => EADDRNOTAVAIL,
            e if e == ECONNREFUSED as c_int    => ECONNREFUSED,
            e if e == EINPROGRESS as c_int     => EINPROGRESS,
            e if e == ENOTSOCK as c_int        => ENOTSOCK,
            e if e == EFSM as c_int            => EFSM,
            e if e == ENOCOMPATPROTO as c_int  => ENOCOMPATPROTO,
            e if e == ETERM as c_int           => ETERM,
            e if e == EMTHREAD as c_int        => EMTHREAD,
            e => fail!(str::raw::from_c_str(zmq::zmq_strerror(e as c_int))),
        }
    }
}

fn getsockopt_int(sock: Socket_, opt: c_int) -> Result<int, Error> {
    let value = 0u32 as c_int;
    let size = sys::size_of::<c_int>() as size_t;

    let r = unsafe {
        zmq::zmq_getsockopt(
            sock,
            opt as c_int,
            ptr::addr_of(&value) as *c_void,
            ptr::addr_of(&size)
        )
    };

    if r == -1i32 { Err(errno_to_error()) } else { Ok(value as int) }
}

fn getsockopt_u32(sock: Socket_, opt: c_int) -> Result<u32, Error> {
    let value = 0u32;
    let size = sys::size_of::<u32>() as size_t;

    let r = unsafe {
        zmq::zmq_getsockopt(
            sock,
            opt,
            ptr::addr_of(&value) as *c_void,
            ptr::addr_of(&size)
        )
    };

    if r == -1i32 { Err(errno_to_error()) } else { Ok(value) }
}

fn getsockopt_i64(sock: Socket_, opt: c_int) -> Result<i64, Error> {
    let value = 0i64;
    let size = sys::size_of::<i64>() as size_t;

    let r = unsafe {
        zmq::zmq_getsockopt(
            sock,
            opt as c_int,
            ptr::addr_of(&value) as *c_void,
            ptr::addr_of(&size)
        )
    };

    if r == -1i32 { Err(errno_to_error()) } else { Ok(value) }
}

fn getsockopt_u64(sock: Socket_, opt: c_int) -> Result<u64, Error> {
    let value = 0u64;
    let size = sys::size_of::<u64>() as size_t;

    let r = unsafe {
        zmq::zmq_getsockopt(
            sock,
            opt,
            ptr::addr_of(&value) as *c_void,
            ptr::addr_of(&size))
    };

    if r == -1i32 { Err(errno_to_error()) } else { Ok(value) }
}

fn getsockopt_bytes(
    sock: Socket_,
    opt: c_int
) -> Result<~[u8], Error> {
    // The only binary option in zeromq is ZMQ_IDENTITY, which can have
    // a max size of 255 bytes.
    let mut size = 255 as size_t;
    let mut value = vec::with_capacity(size as uint);

    unsafe {
        let r = zmq::zmq_getsockopt(
            sock,
            opt as c_int,
            vec::raw::to_ptr(value) as *c_void,
            ptr::addr_of(&size)
        );

        if r == -1i32 {
            Err(errno_to_error())
        } else {
            vec::raw::set_len(&mut value, size as uint);
            Ok(value)
        }
    }
}

fn setsockopt_int(
    sock: Socket_,
    opt: c_int,
    value: int
) -> Result<(), Error> {
    let value = value as c_int;
    let r = unsafe {
        zmq::zmq_setsockopt(
            sock,
            opt as c_int,
            ptr::addr_of(&value) as *c_void,
            sys::size_of::<c_int>() as size_t
        )
    };

    if r == -1i32 { Err(errno_to_error()) } else { Ok(()) }
}

fn setsockopt_i64(
    sock: Socket_,
    opt: c_int,
    value: i64
) -> Result<(), Error> {
    let r = unsafe {
        zmq::zmq_setsockopt(
            sock,
            opt as c_int,
            ptr::addr_of(&value) as *c_void,
            sys::size_of::<i64>() as size_t
        )
    };

    if r == -1i32 { Err(errno_to_error()) } else { Ok(()) }
}

fn setsockopt_u64(
    sock: Socket_,
    opt: c_int,
    value: u64
) -> Result<(), Error> {
    io::println(fmt!("setsockopt_u641: %? %?", opt, value));

    let rc = unsafe {
        zmq::zmq_setsockopt(
            sock,
            opt as c_int,
            ptr::addr_of(&value) as *c_void,
            sys::size_of::<u64>() as size_t
        )
    };

    io::println(fmt!("setsockopt_u642: %?", rc));

    if rc == -1i32 { Err(errno_to_error()) } else { Ok(()) }
}

fn setsockopt_buf(
    sock: Socket_,
    opt: c_int,
    p: *u8,
    len: uint
) -> Result<(), Error> {
    let r = unsafe {
        zmq::zmq_setsockopt(
            sock,
            opt as c_int,
            p as *c_void,
            len as size_t
        )
    };

    if r == -1i32 { Err(errno_to_error()) } else { Ok(()) }
}

fn setsockopt_bytes(
    sock: Socket_,
    opt: c_int,
    value: &[u8]
) -> Result<(), Error> {
    do vec::as_imm_buf(value) |p, len| {
        unsafe { setsockopt_buf(sock, opt, p, len) }
    }
}

fn setsockopt_str(
    sock: Socket_,
    opt: c_int,
    value: &str
) -> Result<(), Error> {
    do str::as_buf(value) |p, len| {
        unsafe { setsockopt_buf(sock, opt, p, len) }
    }
}
